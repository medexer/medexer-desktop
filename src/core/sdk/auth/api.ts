/* tslint:disable */
/* eslint-disable */
/**
 * Auth Docs
 * Authentication endpoints...
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AvailabilityCheckResponsePayload
 */
export interface AvailabilityCheckResponsePayload {
    /**
     * 
     * @type {boolean}
     * @memberof AvailabilityCheckResponsePayload
     */
    'isAvailable': boolean;
}
/**
 * 
 * @export
 * @interface CompleteSignupVerificationDTO
 */
export interface CompleteSignupVerificationDTO {
    /**
     * 
     * @type {string}
     * @memberof CompleteSignupVerificationDTO
     */
    'signupVerificationHash': string;
    /**
     * 
     * @type {string}
     * @memberof CompleteSignupVerificationDTO
     */
    'otp': string;
}
/**
 * 
 * @export
 * @interface CreateAccountDTO
 */
export interface CreateAccountDTO {
    /**
     * Email address of the donor.
     * @type {string}
     * @memberof CreateAccountDTO
     */
    'email': string;
    /**
     * Password for the donor account.
     * @type {string}
     * @memberof CreateAccountDTO
     */
    'password': string;
    /**
     * First name of the donor.
     * @type {string}
     * @memberof CreateAccountDTO
     */
    'firstName': string;
    /**
     * Last name of the donor.
     * @type {string}
     * @memberof CreateAccountDTO
     */
    'lastName': string;
    /**
     * Phone number of the donor.
     * @type {string}
     * @memberof CreateAccountDTO
     */
    'phone': string;
    /**
     * Referral code of the donor (Optional).
     * @type {string}
     * @memberof CreateAccountDTO
     */
    'referralCode': string;
}
/**
 * 
 * @export
 * @interface CreateDonationCenterAccountDTO
 */
export interface CreateDonationCenterAccountDTO {
    /**
     * First name of the donation center administrator.
     * @type {string}
     * @memberof CreateDonationCenterAccountDTO
     */
    'firstName': string;
    /**
     * Last name of the donation center administrator.
     * @type {string}
     * @memberof CreateDonationCenterAccountDTO
     */
    'lastName': string;
    /**
     * Email address of the donation center.
     * @type {string}
     * @memberof CreateDonationCenterAccountDTO
     */
    'email': string;
    /**
     * Password for the donation center account.
     * @type {string}
     * @memberof CreateDonationCenterAccountDTO
     */
    'password': string;
    /**
     * Name of the donation center.
     * @type {string}
     * @memberof CreateDonationCenterAccountDTO
     */
    'name': string;
    /**
     * Phone number of the donation center.
     * @type {string}
     * @memberof CreateDonationCenterAccountDTO
     */
    'phone': string;
}
/**
 * 
 * @export
 * @interface ForgotPasswordDTO
 */
export interface ForgotPasswordDTO {
    /**
     * Account email.
     * @type {string}
     * @memberof ForgotPasswordDTO
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface OAuthSigninDTO
 */
export interface OAuthSigninDTO {
    /**
     * Account email.
     * @type {string}
     * @memberof OAuthSigninDTO
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface ResetPasswordDTO
 */
export interface ResetPasswordDTO {
    /**
     * Account password.
     * @type {string}
     * @memberof ResetPasswordDTO
     */
    'newPassword': string;
    /**
     * Password reset token.
     * @type {string}
     * @memberof ResetPasswordDTO
     */
    'passwordResetToken': string;
    /**
     * Account Id.
     * @type {string}
     * @memberof ResetPasswordDTO
     */
    'accountId': string;
}
/**
 * 
 * @export
 * @interface ResetPasswordOTPVerificationResponsePayload
 */
export interface ResetPasswordOTPVerificationResponsePayload {
    /**
     * Account Id.
     * @type {string}
     * @memberof ResetPasswordOTPVerificationResponsePayload
     */
    'accountId': string;
    /**
     * Password reset token
     * @type {string}
     * @memberof ResetPasswordOTPVerificationResponsePayload
     */
    'passwordResetToken': string;
}
/**
 * 
 * @export
 * @interface ResetPasswordVerificationDTO
 */
export interface ResetPasswordVerificationDTO {
    /**
     * Account email.
     * @type {string}
     * @memberof ResetPasswordVerificationDTO
     */
    'email': string;
    /**
     * Password reset token.
     * @type {string}
     * @memberof ResetPasswordVerificationDTO
     */
    'otp': string;
}
/**
 * 
 * @export
 * @interface SigninAsDTO
 */
export interface SigninAsDTO {
    /**
     * Account email.
     * @type {string}
     * @memberof SigninAsDTO
     */
    'email': string;
    /**
     * Account password.
     * @type {string}
     * @memberof SigninAsDTO
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof SigninAsDTO
     */
    'accountType': SigninAsDTOAccountTypeEnum;
}

export const SigninAsDTOAccountTypeEnum = {
    DonationCenter: 'donation_center',
    Individual: 'individual',
    Admin: 'admin',
    SuperAdmin: 'super_admin',
    System: 'system'
} as const;

export type SigninAsDTOAccountTypeEnum = typeof SigninAsDTOAccountTypeEnum[keyof typeof SigninAsDTOAccountTypeEnum];

/**
 * 
 * @export
 * @interface SigninDTO
 */
export interface SigninDTO {
    /**
     * Account email.
     * @type {string}
     * @memberof SigninDTO
     */
    'email': string;
    /**
     * Account password.
     * @type {string}
     * @memberof SigninDTO
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface SigninResponsePayload
 */
export interface SigninResponsePayload {
    /**
     * 
     * @type {string}
     * @memberof SigninResponsePayload
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface SignupResponsePayload
 */
export interface SignupResponsePayload {
    /**
     * 
     * @type {string}
     * @memberof SignupResponsePayload
     */
    'signupVerificationHash': string;
}
/**
 * 
 * @export
 * @interface SignupVerificationResponsePayload
 */
export interface SignupVerificationResponsePayload {
    /**
     * 
     * @type {string}
     * @memberof SignupVerificationResponsePayload
     */
    'token': string;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {SigninAsDTO} signinAsDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSigninAs: async (signinAsDTO: SigninAsDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signinAsDTO' is not null or undefined
            assertParamExists('authControllerSigninAs', 'signinAsDTO', signinAsDTO)
            const localVarPath = `/v1/auth/signin/as`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signinAsDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SigninDTO} signinDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSigninDonor: async (signinDTO: SigninDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signinDTO' is not null or undefined
            assertParamExists('authControllerSigninDonor', 'signinDTO', signinDTO)
            const localVarPath = `/v1/auth/signin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signinDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {OAuthSigninDTO} oAuthSigninDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSigninOAuth: async (oAuthSigninDTO: OAuthSigninDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oAuthSigninDTO' is not null or undefined
            assertParamExists('authControllerSigninOAuth', 'oAuthSigninDTO', oAuthSigninDTO)
            const localVarPath = `/v1/auth/signin-oauth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(oAuthSigninDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CompleteSignupVerificationDTO} completeSignupVerificationDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignupCompleteVerification: async (completeSignupVerificationDTO: CompleteSignupVerificationDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'completeSignupVerificationDTO' is not null or undefined
            assertParamExists('authControllerSignupCompleteVerification', 'completeSignupVerificationDTO', completeSignupVerificationDTO)
            const localVarPath = `/v1/auth/signup-complete-verification`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(completeSignupVerificationDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateDonationCenterAccountDTO} createDonationCenterAccountDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignupDonationCenter: async (createDonationCenterAccountDTO: CreateDonationCenterAccountDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createDonationCenterAccountDTO' is not null or undefined
            assertParamExists('authControllerSignupDonationCenter', 'createDonationCenterAccountDTO', createDonationCenterAccountDTO)
            const localVarPath = `/v1/auth/signup-donation-center`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createDonationCenterAccountDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateAccountDTO} createAccountDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignupDonor: async (createAccountDTO: CreateAccountDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createAccountDTO' is not null or undefined
            assertParamExists('authControllerSignupDonor', 'createAccountDTO', createAccountDTO)
            const localVarPath = `/v1/auth/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAccountDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {SigninAsDTO} signinAsDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerSigninAs(signinAsDTO: SigninAsDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SigninResponsePayload>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerSigninAs(signinAsDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerSigninAs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {SigninDTO} signinDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerSigninDonor(signinDTO: SigninDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SigninResponsePayload>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerSigninDonor(signinDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerSigninDonor']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {OAuthSigninDTO} oAuthSigninDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerSigninOAuth(oAuthSigninDTO: OAuthSigninDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SigninResponsePayload>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerSigninOAuth(oAuthSigninDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerSigninOAuth']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CompleteSignupVerificationDTO} completeSignupVerificationDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerSignupCompleteVerification(completeSignupVerificationDTO: CompleteSignupVerificationDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignupVerificationResponsePayload>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerSignupCompleteVerification(completeSignupVerificationDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerSignupCompleteVerification']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateDonationCenterAccountDTO} createDonationCenterAccountDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerSignupDonationCenter(createDonationCenterAccountDTO: CreateDonationCenterAccountDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SigninResponsePayload>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerSignupDonationCenter(createDonationCenterAccountDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerSignupDonationCenter']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateAccountDTO} createAccountDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerSignupDonor(createAccountDTO: CreateAccountDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignupResponsePayload>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerSignupDonor(createAccountDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerSignupDonor']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {SigninAsDTO} signinAsDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSigninAs(signinAsDTO: SigninAsDTO, options?: RawAxiosRequestConfig): AxiosPromise<SigninResponsePayload> {
            return localVarFp.authControllerSigninAs(signinAsDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SigninDTO} signinDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSigninDonor(signinDTO: SigninDTO, options?: RawAxiosRequestConfig): AxiosPromise<SigninResponsePayload> {
            return localVarFp.authControllerSigninDonor(signinDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OAuthSigninDTO} oAuthSigninDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSigninOAuth(oAuthSigninDTO: OAuthSigninDTO, options?: RawAxiosRequestConfig): AxiosPromise<SigninResponsePayload> {
            return localVarFp.authControllerSigninOAuth(oAuthSigninDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CompleteSignupVerificationDTO} completeSignupVerificationDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignupCompleteVerification(completeSignupVerificationDTO: CompleteSignupVerificationDTO, options?: RawAxiosRequestConfig): AxiosPromise<SignupVerificationResponsePayload> {
            return localVarFp.authControllerSignupCompleteVerification(completeSignupVerificationDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateDonationCenterAccountDTO} createDonationCenterAccountDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignupDonationCenter(createDonationCenterAccountDTO: CreateDonationCenterAccountDTO, options?: RawAxiosRequestConfig): AxiosPromise<SigninResponsePayload> {
            return localVarFp.authControllerSignupDonationCenter(createDonationCenterAccountDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateAccountDTO} createAccountDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignupDonor(createAccountDTO: CreateAccountDTO, options?: RawAxiosRequestConfig): AxiosPromise<SignupResponsePayload> {
            return localVarFp.authControllerSignupDonor(createAccountDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {SigninAsDTO} signinAsDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerSigninAs(signinAsDTO: SigninAsDTO, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerSigninAs(signinAsDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SigninDTO} signinDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerSigninDonor(signinDTO: SigninDTO, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerSigninDonor(signinDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OAuthSigninDTO} oAuthSigninDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerSigninOAuth(oAuthSigninDTO: OAuthSigninDTO, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerSigninOAuth(oAuthSigninDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CompleteSignupVerificationDTO} completeSignupVerificationDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerSignupCompleteVerification(completeSignupVerificationDTO: CompleteSignupVerificationDTO, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerSignupCompleteVerification(completeSignupVerificationDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateDonationCenterAccountDTO} createDonationCenterAccountDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerSignupDonationCenter(createDonationCenterAccountDTO: CreateDonationCenterAccountDTO, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerSignupDonationCenter(createDonationCenterAccountDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateAccountDTO} createAccountDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerSignupDonor(createAccountDTO: CreateAccountDTO, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerSignupDonor(createAccountDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * HelpersApi - axios parameter creator
 * @export
 */
export const HelpersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authHelperControllerCheckEmailAvailability: async (email: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('authHelperControllerCheckEmailAvailability', 'email', email)
            const localVarPath = `/v1/auth/helper/availability/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} phone 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authHelperControllerCheckPhoneAvailability: async (phone: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'phone' is not null or undefined
            assertParamExists('authHelperControllerCheckPhoneAvailability', 'phone', phone)
            const localVarPath = `/v1/auth/helper/availability/phone`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (phone !== undefined) {
                localVarQueryParameter['phone'] = phone;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HelpersApi - functional programming interface
 * @export
 */
export const HelpersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HelpersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authHelperControllerCheckEmailAvailability(email: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AvailabilityCheckResponsePayload>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authHelperControllerCheckEmailAvailability(email, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HelpersApi.authHelperControllerCheckEmailAvailability']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} phone 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authHelperControllerCheckPhoneAvailability(phone: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AvailabilityCheckResponsePayload>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authHelperControllerCheckPhoneAvailability(phone, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HelpersApi.authHelperControllerCheckPhoneAvailability']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HelpersApi - factory interface
 * @export
 */
export const HelpersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HelpersApiFp(configuration)
    return {
        /**
         * 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authHelperControllerCheckEmailAvailability(email: string, options?: RawAxiosRequestConfig): AxiosPromise<AvailabilityCheckResponsePayload> {
            return localVarFp.authHelperControllerCheckEmailAvailability(email, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} phone 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authHelperControllerCheckPhoneAvailability(phone: string, options?: RawAxiosRequestConfig): AxiosPromise<AvailabilityCheckResponsePayload> {
            return localVarFp.authHelperControllerCheckPhoneAvailability(phone, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HelpersApi - object-oriented interface
 * @export
 * @class HelpersApi
 * @extends {BaseAPI}
 */
export class HelpersApi extends BaseAPI {
    /**
     * 
     * @param {string} email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HelpersApi
     */
    public authHelperControllerCheckEmailAvailability(email: string, options?: RawAxiosRequestConfig) {
        return HelpersApiFp(this.configuration).authHelperControllerCheckEmailAvailability(email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} phone 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HelpersApi
     */
    public authHelperControllerCheckPhoneAvailability(phone: string, options?: RawAxiosRequestConfig) {
        return HelpersApiFp(this.configuration).authHelperControllerCheckPhoneAvailability(phone, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PasswordApi - axios parameter creator
 * @export
 */
export const PasswordApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ForgotPasswordDTO} forgotPasswordDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerForgotPassword: async (forgotPasswordDTO: ForgotPasswordDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'forgotPasswordDTO' is not null or undefined
            assertParamExists('authControllerForgotPassword', 'forgotPasswordDTO', forgotPasswordDTO)
            const localVarPath = `/v1/auth/forgot-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(forgotPasswordDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResetPasswordDTO} resetPasswordDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerResetPassword: async (resetPasswordDTO: ResetPasswordDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resetPasswordDTO' is not null or undefined
            assertParamExists('authControllerResetPassword', 'resetPasswordDTO', resetPasswordDTO)
            const localVarPath = `/v1/auth/reset-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resetPasswordDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResetPasswordVerificationDTO} resetPasswordVerificationDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerResetPasswordOtpVerification: async (resetPasswordVerificationDTO: ResetPasswordVerificationDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resetPasswordVerificationDTO' is not null or undefined
            assertParamExists('authControllerResetPasswordOtpVerification', 'resetPasswordVerificationDTO', resetPasswordVerificationDTO)
            const localVarPath = `/v1/auth/reset-password-otp-verification`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resetPasswordVerificationDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PasswordApi - functional programming interface
 * @export
 */
export const PasswordApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PasswordApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ForgotPasswordDTO} forgotPasswordDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerForgotPassword(forgotPasswordDTO: ForgotPasswordDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerForgotPassword(forgotPasswordDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PasswordApi.authControllerForgotPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ResetPasswordDTO} resetPasswordDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerResetPassword(resetPasswordDTO: ResetPasswordDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerResetPassword(resetPasswordDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PasswordApi.authControllerResetPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ResetPasswordVerificationDTO} resetPasswordVerificationDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerResetPasswordOtpVerification(resetPasswordVerificationDTO: ResetPasswordVerificationDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResetPasswordOTPVerificationResponsePayload>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerResetPasswordOtpVerification(resetPasswordVerificationDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PasswordApi.authControllerResetPasswordOtpVerification']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PasswordApi - factory interface
 * @export
 */
export const PasswordApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PasswordApiFp(configuration)
    return {
        /**
         * 
         * @param {ForgotPasswordDTO} forgotPasswordDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerForgotPassword(forgotPasswordDTO: ForgotPasswordDTO, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authControllerForgotPassword(forgotPasswordDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ResetPasswordDTO} resetPasswordDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerResetPassword(resetPasswordDTO: ResetPasswordDTO, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authControllerResetPassword(resetPasswordDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ResetPasswordVerificationDTO} resetPasswordVerificationDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerResetPasswordOtpVerification(resetPasswordVerificationDTO: ResetPasswordVerificationDTO, options?: RawAxiosRequestConfig): AxiosPromise<ResetPasswordOTPVerificationResponsePayload> {
            return localVarFp.authControllerResetPasswordOtpVerification(resetPasswordVerificationDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PasswordApi - object-oriented interface
 * @export
 * @class PasswordApi
 * @extends {BaseAPI}
 */
export class PasswordApi extends BaseAPI {
    /**
     * 
     * @param {ForgotPasswordDTO} forgotPasswordDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordApi
     */
    public authControllerForgotPassword(forgotPasswordDTO: ForgotPasswordDTO, options?: RawAxiosRequestConfig) {
        return PasswordApiFp(this.configuration).authControllerForgotPassword(forgotPasswordDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ResetPasswordDTO} resetPasswordDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordApi
     */
    public authControllerResetPassword(resetPasswordDTO: ResetPasswordDTO, options?: RawAxiosRequestConfig) {
        return PasswordApiFp(this.configuration).authControllerResetPassword(resetPasswordDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ResetPasswordVerificationDTO} resetPasswordVerificationDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordApi
     */
    public authControllerResetPasswordOtpVerification(resetPasswordVerificationDTO: ResetPasswordVerificationDTO, options?: RawAxiosRequestConfig) {
        return PasswordApiFp(this.configuration).authControllerResetPasswordOtpVerification(resetPasswordVerificationDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



