/* tslint:disable */
/* eslint-disable */
/**
 * Donation Center Service Docs
 * Donation center service endpoints...
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface DonationCenterComplianceAddressDTO
 */
export interface DonationCenterComplianceAddressDTO {
    /**
     * Address of the donation center.
     * @type {string}
     * @memberof DonationCenterComplianceAddressDTO
     */
    'address': string;
    /**
     * Building number of the donation center.
     * @type {string}
     * @memberof DonationCenterComplianceAddressDTO
     */
    'buildingNumber': string;
    /**
     * State of the donation center.
     * @type {string}
     * @memberof DonationCenterComplianceAddressDTO
     */
    'state': string;
    /**
     * Place ID of the donation center.
     * @type {string}
     * @memberof DonationCenterComplianceAddressDTO
     */
    'placeId': string;
    /**
     * Nearest landmark of the donation center.
     * @type {string}
     * @memberof DonationCenterComplianceAddressDTO
     */
    'nearestLandMark': string;
}
/**
 * 
 * @export
 * @interface DonationCenterComplianceCredentialsDTO
 */
export interface DonationCenterComplianceCredentialsDTO {
    /**
     * CAC Certificate of the donation center.
     * @type {string}
     * @memberof DonationCenterComplianceCredentialsDTO
     */
    'cacCertificate': string;
    /**
     * Proof of address of the donation center.
     * @type {string}
     * @memberof DonationCenterComplianceCredentialsDTO
     */
    'proofOfAddress': string;
}
/**
 * 
 * @export
 * @interface DonationCenterComplianceDetailsDTO
 */
export interface DonationCenterComplianceDetailsDTO {
    /**
     * Logo of the donation center.
     * @type {string}
     * @memberof DonationCenterComplianceDetailsDTO
     */
    'logo': string;
    /**
     * Cover photo of the donation center.
     * @type {string}
     * @memberof DonationCenterComplianceDetailsDTO
     */
    'coverPhoto': string;
    /**
     * Name of the donation center
     * @type {string}
     * @memberof DonationCenterComplianceDetailsDTO
     */
    'name': string;
    /**
     * Short description of the donation center
     * @type {string}
     * @memberof DonationCenterComplianceDetailsDTO
     */
    'shortDescription': string;
    /**
     * Long description of the donation center
     * @type {string}
     * @memberof DonationCenterComplianceDetailsDTO
     */
    'longDescription': string;
    /**
     * Donation center email.
     * @type {string}
     * @memberof DonationCenterComplianceDetailsDTO
     */
    'email': string;
    /**
     * Phone number of the donation center.
     * @type {string}
     * @memberof DonationCenterComplianceDetailsDTO
     */
    'phone': string;
}
/**
 * 
 * @export
 * @interface DonationCenterComplianceInfo
 */
export interface DonationCenterComplianceInfo {
    /**
     * Account ID (Auto generated)
     * @type {number}
     * @memberof DonationCenterComplianceInfo
     */
    'id'?: number;
    /**
     * First name e.g Tunde
     * @type {string}
     * @memberof DonationCenterComplianceInfo
     */
    'name'?: string;
    /**
     * Phone number e.g +2348090292842
     * @type {string}
     * @memberof DonationCenterComplianceInfo
     */
    'phone'?: string;
    /**
     * Email address e.g tundeomotayo@gmail.com
     * @type {string}
     * @memberof DonationCenterComplianceInfo
     */
    'email'?: string;
    /**
     * Address e.g Gate 1 Laming Road Jos, Plateau State
     * @type {string}
     * @memberof DonationCenterComplianceInfo
     */
    'address'?: string;
    /**
     * Building number e.g 123
     * @type {string}
     * @memberof DonationCenterComplianceInfo
     */
    'buildingNumber'?: string;
    /**
     * Nearest landmark
     * @type {string}
     * @memberof DonationCenterComplianceInfo
     */
    'nearestLandMark'?: string;
    /**
     * State e.g Plateau
     * @type {string}
     * @memberof DonationCenterComplianceInfo
     */
    'state'?: string;
    /**
     * State area e.g Jos North
     * @type {string}
     * @memberof DonationCenterComplianceInfo
     */
    'stateArea'?: string;
    /**
     * Latitude e.g 9.2928839
     * @type {string}
     * @memberof DonationCenterComplianceInfo
     */
    'latitude'?: string;
    /**
     * Longitude e.g 9.481991
     * @type {string}
     * @memberof DonationCenterComplianceInfo
     */
    'longitude'?: string;
    /**
     * Logo URL
     * @type {string}
     * @memberof DonationCenterComplianceInfo
     */
    'logo'?: string;
    /**
     * Cover photo URL
     * @type {string}
     * @memberof DonationCenterComplianceInfo
     */
    'coverPhoto'?: string;
    /**
     * Short description of the donation center
     * @type {string}
     * @memberof DonationCenterComplianceInfo
     */
    'shortDescription'?: string;
    /**
     * Detailed description of the donation center
     * @type {string}
     * @memberof DonationCenterComplianceInfo
     */
    'longDescription'?: string;
    /**
     * Account status
     * @type {string}
     * @memberof DonationCenterComplianceInfo
     */
    'status'?: DonationCenterComplianceInfoStatusEnum;
    /**
     * In compliance uploaded
     * @type {boolean}
     * @memberof DonationCenterComplianceInfo
     */
    'isComplianceUploaded'?: boolean;
    /**
     * In compliance approved
     * @type {boolean}
     * @memberof DonationCenterComplianceInfo
     */
    'isComplianceApproved'?: boolean;
    /**
     * Verification decline reason
     * @type {string}
     * @memberof DonationCenterComplianceInfo
     */
    'verificationDeclineReason'?: string;
    /**
     * CAC Certificate URL
     * @type {string}
     * @memberof DonationCenterComplianceInfo
     */
    'cacCertificate'?: string;
    /**
     * Proof of address document URL
     * @type {string}
     * @memberof DonationCenterComplianceInfo
     */
    'proofOfAddress'?: string;
}

export const DonationCenterComplianceInfoStatusEnum = {
    Pending: 'pending',
    Active: 'active',
    Inactive: 'inactive',
    ShadowBanned: 'shadow_banned',
    Disabled: 'disabled'
} as const;

export type DonationCenterComplianceInfoStatusEnum = typeof DonationCenterComplianceInfoStatusEnum[keyof typeof DonationCenterComplianceInfoStatusEnum];

/**
 * 
 * @export
 * @interface DonationCenterInfo
 */
export interface DonationCenterInfo {
    /**
     * Account ID (Auto generated)
     * @type {string}
     * @memberof DonationCenterInfo
     */
    'id'?: string;
    /**
     * First name e.g Tunde.
     * @type {string}
     * @memberof DonationCenterInfo
     */
    'name'?: string;
    /**
     * Phone number e.g +2348090292842.
     * @type {string}
     * @memberof DonationCenterInfo
     */
    'phone'?: string;
    /**
     * Email address e.g tundeomotayo@gmail.com.
     * @type {string}
     * @memberof DonationCenterInfo
     */
    'email'?: string;
    /**
     * Address e.g Gate 1 Laming Road Jos, Plateau State
     * @type {string}
     * @memberof DonationCenterInfo
     */
    'address'?: string;
    /**
     * Building number e.g 123
     * @type {string}
     * @memberof DonationCenterInfo
     */
    'buildingNumber'?: string;
    /**
     * Nearest landmark e.g Gate 1 Laming Road Jos, Plateau State
     * @type {string}
     * @memberof DonationCenterInfo
     */
    'nearestLandMark'?: string;
    /**
     * State e.g Plateau
     * @type {string}
     * @memberof DonationCenterInfo
     */
    'state'?: string;
    /**
     * State area e.g Jos North
     * @type {string}
     * @memberof DonationCenterInfo
     */
    'stateArea'?: string;
    /**
     * Latitude e.g 9.2928839
     * @type {string}
     * @memberof DonationCenterInfo
     */
    'latitude'?: string;
    /**
     * Longitude e.g 9.481991
     * @type {string}
     * @memberof DonationCenterInfo
     */
    'longitude'?: string;
    /**
     * Logo e.g https://medexer.s3.amazonaws.com/avatars/avatar.png
     * @type {string}
     * @memberof DonationCenterInfo
     */
    'logo'?: string;
    /**
     * Cover photo e.g https://medexer.s3.amazonaws.com/avatars/avatar.png
     * @type {string}
     * @memberof DonationCenterInfo
     */
    'coverPhoto'?: string;
    /**
     * Short description of the donation center.
     * @type {string}
     * @memberof DonationCenterInfo
     */
    'shortDescription'?: string;
    /**
     * Detailed description of the donation center.
     * @type {string}
     * @memberof DonationCenterInfo
     */
    'longDescription'?: string;
    /**
     * Account status e.g PENDING
     * @type {string}
     * @memberof DonationCenterInfo
     */
    'status'?: string;
    /**
     * In compliance uploaded e.g false
     * @type {boolean}
     * @memberof DonationCenterInfo
     */
    'isComplianceUploaded'?: boolean;
    /**
     * In compliance approved e.g false
     * @type {boolean}
     * @memberof DonationCenterInfo
     */
    'isComplianceApproved'?: boolean;
    /**
     * Flag to check if donation center credentials requires verification
     * @type {string}
     * @memberof DonationCenterInfo
     */
    'verificationDeclineReason'?: string;
    /**
     * Average rating e.g 4.5
     * @type {string}
     * @memberof DonationCenterInfo
     */
    'averageRating'?: string;
}
/**
 * 
 * @export
 * @interface GooglePlacePrediction
 */
export interface GooglePlacePrediction {
    /**
     * The description of the place
     * @type {string}
     * @memberof GooglePlacePrediction
     */
    'description': string;
    /**
     * The place id
     * @type {string}
     * @memberof GooglePlacePrediction
     */
    'place_id': string;
    /**
     * The reference of the place
     * @type {string}
     * @memberof GooglePlacePrediction
     */
    'reference': string;
}

/**
 * AddressHelperApi - axios parameter creator
 * @export
 */
export const AddressHelperApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} searchQuery 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressHelperControllerGetGooglePlaceAutocomplete: async (searchQuery: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchQuery' is not null or undefined
            assertParamExists('addressHelperControllerGetGooglePlaceAutocomplete', 'searchQuery', searchQuery)
            const localVarPath = `/v1/donation-center/address-helper/place-autocomplete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchQuery !== undefined) {
                localVarQueryParameter['searchQuery'] = searchQuery;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AddressHelperApi - functional programming interface
 * @export
 */
export const AddressHelperApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AddressHelperApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} searchQuery 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addressHelperControllerGetGooglePlaceAutocomplete(searchQuery: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GooglePlacePrediction>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addressHelperControllerGetGooglePlaceAutocomplete(searchQuery, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AddressHelperApi.addressHelperControllerGetGooglePlaceAutocomplete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AddressHelperApi - factory interface
 * @export
 */
export const AddressHelperApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AddressHelperApiFp(configuration)
    return {
        /**
         * 
         * @param {string} searchQuery 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressHelperControllerGetGooglePlaceAutocomplete(searchQuery: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<GooglePlacePrediction>> {
            return localVarFp.addressHelperControllerGetGooglePlaceAutocomplete(searchQuery, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AddressHelperApi - object-oriented interface
 * @export
 * @class AddressHelperApi
 * @extends {BaseAPI}
 */
export class AddressHelperApi extends BaseAPI {
    /**
     * 
     * @param {string} searchQuery 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressHelperApi
     */
    public addressHelperControllerGetGooglePlaceAutocomplete(searchQuery: string, options?: RawAxiosRequestConfig) {
        return AddressHelperApiFp(this.configuration).addressHelperControllerGetGooglePlaceAutocomplete(searchQuery, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ComplianceApi - axios parameter creator
 * @export
 */
export const ComplianceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        donationCenterControllerGetComplianceInfo: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/donation-center/compliance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DonationCenterComplianceAddressDTO} donationCenterComplianceAddressDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        donationCenterControllerUploadComplianceAddress: async (donationCenterComplianceAddressDTO: DonationCenterComplianceAddressDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'donationCenterComplianceAddressDTO' is not null or undefined
            assertParamExists('donationCenterControllerUploadComplianceAddress', 'donationCenterComplianceAddressDTO', donationCenterComplianceAddressDTO)
            const localVarPath = `/v1/donation-center/compliance/address`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(donationCenterComplianceAddressDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DonationCenterComplianceCredentialsDTO} donationCenterComplianceCredentialsDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        donationCenterControllerUploadComplianceCredentials: async (donationCenterComplianceCredentialsDTO: DonationCenterComplianceCredentialsDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'donationCenterComplianceCredentialsDTO' is not null or undefined
            assertParamExists('donationCenterControllerUploadComplianceCredentials', 'donationCenterComplianceCredentialsDTO', donationCenterComplianceCredentialsDTO)
            const localVarPath = `/v1/donation-center/compliance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(donationCenterComplianceCredentialsDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DonationCenterComplianceDetailsDTO} donationCenterComplianceDetailsDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        donationCenterControllerUploadComplianceDetails: async (donationCenterComplianceDetailsDTO: DonationCenterComplianceDetailsDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'donationCenterComplianceDetailsDTO' is not null or undefined
            assertParamExists('donationCenterControllerUploadComplianceDetails', 'donationCenterComplianceDetailsDTO', donationCenterComplianceDetailsDTO)
            const localVarPath = `/v1/donation-center/compliance/details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(donationCenterComplianceDetailsDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ComplianceApi - functional programming interface
 * @export
 */
export const ComplianceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ComplianceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async donationCenterControllerGetComplianceInfo(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DonationCenterComplianceInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.donationCenterControllerGetComplianceInfo(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ComplianceApi.donationCenterControllerGetComplianceInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {DonationCenterComplianceAddressDTO} donationCenterComplianceAddressDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async donationCenterControllerUploadComplianceAddress(donationCenterComplianceAddressDTO: DonationCenterComplianceAddressDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DonationCenterComplianceInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.donationCenterControllerUploadComplianceAddress(donationCenterComplianceAddressDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ComplianceApi.donationCenterControllerUploadComplianceAddress']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {DonationCenterComplianceCredentialsDTO} donationCenterComplianceCredentialsDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async donationCenterControllerUploadComplianceCredentials(donationCenterComplianceCredentialsDTO: DonationCenterComplianceCredentialsDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DonationCenterComplianceInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.donationCenterControllerUploadComplianceCredentials(donationCenterComplianceCredentialsDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ComplianceApi.donationCenterControllerUploadComplianceCredentials']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {DonationCenterComplianceDetailsDTO} donationCenterComplianceDetailsDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async donationCenterControllerUploadComplianceDetails(donationCenterComplianceDetailsDTO: DonationCenterComplianceDetailsDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DonationCenterComplianceInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.donationCenterControllerUploadComplianceDetails(donationCenterComplianceDetailsDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ComplianceApi.donationCenterControllerUploadComplianceDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ComplianceApi - factory interface
 * @export
 */
export const ComplianceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ComplianceApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        donationCenterControllerGetComplianceInfo(options?: RawAxiosRequestConfig): AxiosPromise<DonationCenterComplianceInfo> {
            return localVarFp.donationCenterControllerGetComplianceInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DonationCenterComplianceAddressDTO} donationCenterComplianceAddressDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        donationCenterControllerUploadComplianceAddress(donationCenterComplianceAddressDTO: DonationCenterComplianceAddressDTO, options?: RawAxiosRequestConfig): AxiosPromise<DonationCenterComplianceInfo> {
            return localVarFp.donationCenterControllerUploadComplianceAddress(donationCenterComplianceAddressDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DonationCenterComplianceCredentialsDTO} donationCenterComplianceCredentialsDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        donationCenterControllerUploadComplianceCredentials(donationCenterComplianceCredentialsDTO: DonationCenterComplianceCredentialsDTO, options?: RawAxiosRequestConfig): AxiosPromise<DonationCenterComplianceInfo> {
            return localVarFp.donationCenterControllerUploadComplianceCredentials(donationCenterComplianceCredentialsDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DonationCenterComplianceDetailsDTO} donationCenterComplianceDetailsDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        donationCenterControllerUploadComplianceDetails(donationCenterComplianceDetailsDTO: DonationCenterComplianceDetailsDTO, options?: RawAxiosRequestConfig): AxiosPromise<DonationCenterComplianceInfo> {
            return localVarFp.donationCenterControllerUploadComplianceDetails(donationCenterComplianceDetailsDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ComplianceApi - object-oriented interface
 * @export
 * @class ComplianceApi
 * @extends {BaseAPI}
 */
export class ComplianceApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComplianceApi
     */
    public donationCenterControllerGetComplianceInfo(options?: RawAxiosRequestConfig) {
        return ComplianceApiFp(this.configuration).donationCenterControllerGetComplianceInfo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DonationCenterComplianceAddressDTO} donationCenterComplianceAddressDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComplianceApi
     */
    public donationCenterControllerUploadComplianceAddress(donationCenterComplianceAddressDTO: DonationCenterComplianceAddressDTO, options?: RawAxiosRequestConfig) {
        return ComplianceApiFp(this.configuration).donationCenterControllerUploadComplianceAddress(donationCenterComplianceAddressDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DonationCenterComplianceCredentialsDTO} donationCenterComplianceCredentialsDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComplianceApi
     */
    public donationCenterControllerUploadComplianceCredentials(donationCenterComplianceCredentialsDTO: DonationCenterComplianceCredentialsDTO, options?: RawAxiosRequestConfig) {
        return ComplianceApiFp(this.configuration).donationCenterControllerUploadComplianceCredentials(donationCenterComplianceCredentialsDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DonationCenterComplianceDetailsDTO} donationCenterComplianceDetailsDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComplianceApi
     */
    public donationCenterControllerUploadComplianceDetails(donationCenterComplianceDetailsDTO: DonationCenterComplianceDetailsDTO, options?: RawAxiosRequestConfig) {
        return ComplianceApiFp(this.configuration).donationCenterControllerUploadComplianceDetails(donationCenterComplianceDetailsDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DonationCenterApi - axios parameter creator
 * @export
 */
export const DonationCenterApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        donationCenterControllerGetDonationCenterProfile: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/donation-center/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DonationCenterApi - functional programming interface
 * @export
 */
export const DonationCenterApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DonationCenterApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async donationCenterControllerGetDonationCenterProfile(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DonationCenterInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.donationCenterControllerGetDonationCenterProfile(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DonationCenterApi.donationCenterControllerGetDonationCenterProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DonationCenterApi - factory interface
 * @export
 */
export const DonationCenterApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DonationCenterApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        donationCenterControllerGetDonationCenterProfile(options?: RawAxiosRequestConfig): AxiosPromise<DonationCenterInfo> {
            return localVarFp.donationCenterControllerGetDonationCenterProfile(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DonationCenterApi - object-oriented interface
 * @export
 * @class DonationCenterApi
 * @extends {BaseAPI}
 */
export class DonationCenterApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DonationCenterApi
     */
    public donationCenterControllerGetDonationCenterProfile(options?: RawAxiosRequestConfig) {
        return DonationCenterApiFp(this.configuration).donationCenterControllerGetDonationCenterProfile(options).then((request) => request(this.axios, this.basePath));
    }
}



